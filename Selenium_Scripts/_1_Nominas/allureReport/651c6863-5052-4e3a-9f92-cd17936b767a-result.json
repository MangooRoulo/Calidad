{"name": "test_Ordenamientos", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=134.0.6998.167)\nStacktrace:\n\tGetHandleVerifier [0x00FDC7F3+24435]\n\t(No symbol) [0x00F62074]\n\t(No symbol) [0x00E306E3]\n\t(No symbol) [0x00E0F83E]\n\t(No symbol) [0x00EA455E]\n\t(No symbol) [0x00EBEB19]\n\t(No symbol) [0x00E9D5B6]\n\t(No symbol) [0x00E6C54F]\n\t(No symbol) [0x00E6D894]\n\tGetHandleVerifier [0x012E70A3+3213347]\n\tGetHandleVerifier [0x012FB0C9+3295305]\n\tGetHandleVerifier [0x012F558C+3271948]\n\tGetHandleVerifier [0x01077360+658144]\n\t(No symbol) [0x00F6B27D]\n\t(No symbol) [0x00F68208]\n\t(No symbol) [0x00F683A9]\n\t(No symbol) [0x00F5AAC0]\n\tBaseThreadInitThunk [0x76177BA9+25]\n\tRtlInitializeExceptionChain [0x7784C2EB+107]\n\tRtlClearBits [0x7784C26F+191]", "trace": "driver_setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cb1573725b2ca24889fd3bed5addc498\")>\n\n    @allure.feature('Nominas Test')\n    def test_Ordenamientos(driver_setup):\n        driver = driver_setup\n    \n        try:\n            funcion = global_functions(driver)\n            funcionNominas = nominas_functions(driver)\n    \n            funcion.inicioSesion()\n>           funcionNominas.AccesoNominas()\n\ntest_2_Ordenamientos.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\Funciones_Nominas\\Funciones_Nominas.py:49: in AccesoNominas\n    self.driver.find_element(By.XPATH, Campos.Configuracion).click()\nC:\\Users\\steve\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:888: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\steve\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000229D9579450>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x76177BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7784C2EB+107]\\\\n\\\\tRtlClearBits [0x7784C26F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=134.0.6998.167)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00FDC7F3+24435]\nE       \t(No symbol) [0x00F62074]\nE       \t(No symbol) [0x00E306E3]\nE       \t(No symbol) [0x00E0F83E]\nE       \t(No symbol) [0x00EA455E]\nE       \t(No symbol) [0x00EBEB19]\nE       \t(No symbol) [0x00E9D5B6]\nE       \t(No symbol) [0x00E6C54F]\nE       \t(No symbol) [0x00E6D894]\nE       \tGetHandleVerifier [0x012E70A3+3213347]\nE       \tGetHandleVerifier [0x012FB0C9+3295305]\nE       \tGetHandleVerifier [0x012F558C+3271948]\nE       \tGetHandleVerifier [0x01077360+658144]\nE       \t(No symbol) [0x00F6B27D]\nE       \t(No symbol) [0x00F68208]\nE       \t(No symbol) [0x00F683A9]\nE       \t(No symbol) [0x00F5AAC0]\nE       \tBaseThreadInitThunk [0x76177BA9+25]\nE       \tRtlInitializeExceptionChain [0x7784C2EB+107]\nE       \tRtlClearBits [0x7784C26F+191]\n\nC:\\Users\\steve\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver_setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cb1573725b2ca24889fd3bed5addc498\")>\n\n    @allure.feature('Nominas Test')\n    def test_Ordenamientos(driver_setup):\n        driver = driver_setup\n    \n        try:\n            funcion = global_functions(driver)\n            funcionNominas = nominas_functions(driver)\n    \n            funcion.inicioSesion()\n            funcionNominas.AccesoNominas()\n            #funcionNominas.pruebas(\"Orden\",\"Primer_Apellido\",\"Segundo_Apellido\",\"Nombre\",\"ID\")\n            funcionNominas.pruebas3filas(\"Orden\",\"Primer_Apellido\",\"Segundo_Apellido\",\"Nombre\",\"ID\")\n            funcion.cerrarSesion()\n    \n        except Exception as e:\n            # Tomar la captura de pantalla si ocurre un error\n>           allure.attach(driver.get_screenshot_as_png(), name=\"screenshot_error\", attachment_type=AttachmentType.PNG)\n\ntest_2_Ordenamientos.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\steve\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:993: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nC:\\Users\\steve\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nC:\\Users\\steve\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000229D9579450>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x76177BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7784C2EB+107]\\\\n\\\\tRtlClearBits [0x7784C26F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=134.0.6998.167)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00FDC7F3+24435]\nE       \t(No symbol) [0x00F62074]\nE       \t(No symbol) [0x00E306E3]\nE       \t(No symbol) [0x00E0F83E]\nE       \t(No symbol) [0x00EA455E]\nE       \t(No symbol) [0x00EBEB19]\nE       \t(No symbol) [0x00E9D5B6]\nE       \t(No symbol) [0x00E6C54F]\nE       \t(No symbol) [0x00E6D894]\nE       \tGetHandleVerifier [0x012E70A3+3213347]\nE       \tGetHandleVerifier [0x012FB0C9+3295305]\nE       \tGetHandleVerifier [0x012F558C+3271948]\nE       \tGetHandleVerifier [0x01077360+658144]\nE       \t(No symbol) [0x00F6B27D]\nE       \t(No symbol) [0x00F68208]\nE       \t(No symbol) [0x00F683A9]\nE       \t(No symbol) [0x00F5AAC0]\nE       \tBaseThreadInitThunk [0x76177BA9+25]\nE       \tRtlInitializeExceptionChain [0x7784C2EB+107]\nE       \tRtlClearBits [0x7784C26F+191]\n\nC:\\Users\\steve\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "stdout", "source": "190b3e3b-f4cf-4d4a-ba77-3695bacaa246-attachment.txt", "type": "text/plain"}], "start": 1743097384472, "stop": 1743097390509, "uuid": "ba93f427-22cf-4cb5-876e-83092306080c", "historyId": "b225d9e8a0157200e2404659e29f5b93", "testCaseId": "b225d9e8a0157200e2404659e29f5b93", "fullName": "test_2_Ordenamientos#test_Ordenamientos", "labels": [{"name": "feature", "value": "Nominas Test"}, {"name": "suite", "value": "test_2_Ordenamientos"}, {"name": "host", "value": "Steven"}, {"name": "thread", "value": "15924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_2_Ordenamientos"}]}